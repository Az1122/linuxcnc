.de TQ
.br
.ns
.TP \\$1
..

.TH KINS "9" "2014-12-22" "LinuxCNC Documentation" "Kinematics Modules"
.SH NAME
kins \- kinematics definitions for LinuxCNC
.SH SYNOPSIS
.B loadrt trivkins
.PP
.B loadrt rotatekins 
.PP
.B loadrt tripodkins
.PP
.B loadrt genhexkins
.PP
.B loadrt maxkins
.PP
.B loadrt genserkins
.PP
.B loadrt pumakins
.PP
.B loadrt scarakins

.SH Additional kinematics modules (individual man pages):
lineardeltakins

.SH DESCRIPTION
Rather than exporting HAL pins and functions, these components provide the
forward and inverse kinematics definitions for LinuxCNC.


.SS trivkins \- generalized trivial kinematics
There is a 1:1 correspondence between joints and axes.
Joint numbers are assigned sequentialy according to the axis letters specified
with the \fBcoordinates=\fR parameter.

If the coordinates= parameter is omitted, joint numbers are assigned
\fBsequentially\fR to every known axis letter ("xyzabcuvw").

.TP
Example: loadrt \fBtrivkins\fR
.TP
Assigns all axis letters to joint numbers in sequence:
.PP
   x==joint0, y==joint1, z==joint2
   a==joint0, b==joint1, c==joint2
   u==joint0, v==joint1, w==joint2

.TQ
Example: loadrt \fBtrivkins coordinates=xyz\fR
.TQ
Assigns: x==joint0, y==joint1, z==joint2

.TQ
Example: loadrt \fBtrivkins coordinates=xz\fR
.TQ
Assigns: x==joint0, z==joint1


.PP
The default kinematics type is \fBKINEMATICS_IDENTITY\fR.  Guis may provide
special features for configurations using this default kinematics type.  For
instance, the axis gui automatically handles joint and world mode operations so
that the distinctions between joints and axes are not visible to the operator.
This is feasible since there is an exact correspondence between a joint number
and its matching axis letter.

.TQ
The kinematics type can be set with the \fBkinstype=\fR parameter:

.TQ
  kinstype=\fB1\fR     for KINEMATICS_IDENTITY (default if kinstype= omitted)
.TQ
  kinstype=[\fBb\fR|\fBB\fR] for KINEMATICS_BOTH
.TQ
  kinstype=[\fBf\fR|\fBF\fR] for KINEMATICS_FORWARD_ONLY
.TQ
  kinstype=[\fBi\fR|\fBI\fR] for KINEMATICS_INVERSE_ONLY

.TP
Example: loadrt \fBtrivkins coordinates=xyz kinstype=b\fR

.PP
Use kinstype=\fBKINEMATICS_BOTH\fR for configurations that need to move joints
independently (joint mode) or as coordinated (teleop) movements in world coordinates.

When using the axis gui with \fBKINEMATICS_BOTH\fR, the '$' key is
used to toggle between joint and teleop (world) modes.

.PP
An axis letter may be assigned more than once.
.TQ
Example: coordinates=\fBxyyzw\fR \fBkinstype=BOTH\fR
.TQ
Assigns: x==joint0, y==joint1 \fBAND\fR joint2, z==joint3, w==joint4

.PP
The above example is representative of a gantry configuration that uses
two joints (joint1 and joint2) to move a single axis (y).  Using
kinstype=BOTH allows the configuration to be toggled between joint
and world modes of operation.

.SS rotatekins \- Rotated Kinematics
The X and Y axes are rotated 45 degrees compared to the joints 0 and 1.
.SS tripodkins \- Tripod Kinematics
The joints represent the distance of the controlled point from three predefined
locations (the motors), giving three degrees of freedom in position (XYZ)
.TP
.B tripodkins.Bx
.TQ
.B tripodkins.Cx
.TQ
.B tripodkins.Cy
The location of the three motors is (0,0), (Bx,0), and (Cx,Cy)
.SS genhexkins \- Hexapod Kinematics
Gives six degrees of freedom in position and orientation (XYZABC).  The
location of base and platform joints is defined by hal parameters.  The
forward kinematics iteration is controlled by hal pins.
.TP
.B genhexkins.base.\fIN\fB.x
.TQ
.B genhexkins.base.\fIN\fB.y
.TQ
.B genhexkins.base.\fIN\fB.z
.TQ
.B genhexkins.platform.\fIN\fB.x
.TQ
.B genhexkins.platform.\fIN\fB.y
.TQ
.B genhexkins.platform.\fIN\fB.z
Parameters describing the \fIN\fRth joint's coordinates.
.TQ
.B genhexkins.convergence-criterion
Minimum error value that ends iterations with converged solution.
.TQ
.B genhexkins.limit-iterations
Limit of iterations, if exceeded iterations stop with no convergence.
.TQ
.B genhexkins.max-error
Maximum error value, if exceeded iterations stop with no convergence.
.TQ
.B genhexkins.last-iterations
Number of iterations spent for the last forward kinematics solution.
.TQ
.B genhexkins.max-iterations
Maximum number of iterations spent for a converged solution during current
session.
.SS maxkins \- 5-axis kinematics example
Kinematics for Chris Radek's tabletop 5 axis mill named 'max' with tilting
head (B axis) and horizintal rotary mounted to the table (C axis).  Provides
UVW motion in the rotated coordinate system.  The source file, maxkins.c,
may be a useful starting point for other 5-axis systems.
.SS genserkins \- generalized serial kinematics
Kinematics that can model a general serial-link manipulator with up to 6
angular joints.  

The kinematics use Denavit-Hartenberg definition for the joint and
links. The DH definitions are the ones used by John J Craig in
"Introduction to Robotics: Mechanics and Control" The parameters for the
manipulator are defined by hal pins.
.TP
.B genserkins.A-\fIN
.TQ
.B genserkins.ALPHA-\fIN
.TQ
.B genserkins.D-\fIN
Parameters describing the \fIN\fRth joint's geometry.


.SS pumakins \- kinematics for puma typed robots
Kinematics for a puma-style robot with 6 joints
.TP
.B pumakins.A2
.TQ
.B pumakins.A3
.TQ
.B pumakins.D3
.TQ
.B pumakins.D4
Describe the geometry of the robot

.SS scarakins \- kinematics for SCARA-type robots
.TP
.B scarakins.D1
Vertical distance from the ground plane to the center of the inner arm.
.TP
.B scarakins.D2
Horizontal distance between joint[0] axis and joint[1] axis, ie.  the
length of the inner arm.
.TP
.B scarakins.D3
Vertical distance from the center of the inner arm to the center of the
outer arm.  May be positive or negative depending on the structure of
the robot.
.TP
.B scarakins.D4
Horizontal distance between joint[1] axis and joint[2] axis, ie.  the
length of the outer arm.
.TP
.B scarakins.D5
Vertical distance from the end effector to the tooltip.  Positive means
the tooltip is lower than the end effector, and is the normal case.
.TP
.B scarakins.D6
Horizontal distance from the centerline of the end effector (and the
joints 2 and 3 axis) and the tooltip.  Zero means the tooltip is on the
centerline.  Non-zero values should be positive, if negative they
introduce a 180 degree offset on the value of joint[3].

.SH SEE ALSO
\fIKinematics\fR section in the LinuxCNC documentation

