[[cha:updating-linuxcnc]] (((Updating LinuxCNC)))

= Updating LinuxCNC

This section describes how to upgrade LinuxCNC from version 2.7 to the
new version.  It assumes that you have an existing 2.7 install that you
want to update.

To upgrade LinuxCNC from a version older than 2.7, you have to first
http://linuxcnc.org/docs/2.7/html/getting-started/updating-linuxcnc.html[upgrade
your old install to 2.7], then follow these instructions to upgrade to
the new version.

If you do not have an old version of LinuxCNC to upgrade, then you're
best off making a fresh install of the new version as described in the
section <<cha:getting-linuxcnc,Getting LinuxCNC>>.


== Upgrade to the new version

The basic idea is to disable the old linuxcnc.org apt sources and add
a new linuxcnc.org apt source, then upgrade the LinuxCNC packages.

The details will depend on which platform you're running on.
Run `lsb_release -ic` to find this information out:

-----
> lsb_release -ic
Distributor ID: Debian
Codename:       wheezy
-----

You should be running on Debian Wheezy (as above), or Ubuntu Precise,
or Ubuntu Lucid.


=== Setting apt sources

* Open the `Software Sources` window. The process for doing this
  differs slightly on the three supported platforms:

** Debian Wheezy:

*** Click on `Applications Menu`, then `System`, then
  `Synaptic Package Manager`.

*** In Synaptic, click on the `Settings` menu, then click `Repositories`
  to open the `Software Sources` window.

** Ubuntu Precise:

*** Click on the `Dash Home` icon in the top left.

*** In the `Search` field, type "software", then click on the `Ubuntu
  Software Center` icon.

*** In the Ubuntu Software Center window, click on the `Edit` menu,
  then click on `Software Sources...` to open the `Software Sources`
  window.

** Ubuntu Lucid:

*** Click the `System` menu, then `Administration`, then
  `Synaptic Package Manager`.

*** In Synaptic, click on the `Settings` menu, then click `Repositories`
  to open the `Software Sources` window.

* In the `Software Sources` window, select the `Other Software` tab.

* Delete or un-check all the old linuxcnc.org entries (leave all
  non-linuxcnc.org lines as they are).

* Click the `Add` button and add a new apt line. The line will be
  slightly different on the different platforms:

[options="header"]
|====
| Platform       | apt source line
| Debian Wheezy  | `deb http://linuxcnc.org wheezy base 2.7-rtai`
| Ubuntu Precise | `deb http://linuxcnc.org precise base 2.7-rtai`
| Ubuntu Lucid   | `deb http://linuxcnc.org lucid base 2.7-rtai`
|====

image::images/upgrading-to-2.7.png[align="left"]

* Click `Add Source`, then `Close` in the Software Sources window.
  If it pops up a window informing you that the information about
  available software is out-of-date, click the `Reload` button.


=== Upgrading to the new version

Now your computer knows where to get the new version of the software,
next we need to install it.

The process again differs depending on your platform.

==== Debian Wheezy and Ubuntu Lucid

Debian Wheezy and Ubuntu Lucid both use the Synaptic Package Manager.

* Open Synaptic using the instructions in <<_setting_apt_sources,Setting
  apt sources>> above.

* Click the `Reload` button.

* Use the Search function to search for `linuxcnc`.

* Click the check box to mark the new linuxcnc and linuxcnc-doc-*
  packages for upgrade. The package manager may select a number of
  additional packages to be installed, to satisfy dependencies that the
  new linuxcnc package has.

* Click the `Apply` button, and let your computer install the new
  package. The old linuxcnc package will be automatically upgraded to
  the new one.


=== Ubuntu Precise

* Click on the `Dash Home` icon in the top left.

* In the `Search` field, type "update", then click on the `Update Manager`
  icon.

* Click the `Check` button to fetch the list of packages available.

* Click the `Install Updates` button to install the new versions of
  all packages.


== Updating Configuration Files

The new version of LinuxCNC differs from version 2.7 in some ways that
may require changes to your machine configuration.


=== Stricter INI file syntax

Lines with numeric INI variables are no longer allowed to have trailing
text.  In earlier versions of LinuxCNC any text after the number was
silently ignored, but as of this version such text is totally disallowed.
This includes hash characters ("#"), which in this position are a part of the value, not a comment character.

For example, lines like this will no longer be accepted:
-----
MAX_VELOCITY = 7.5 # This is the max velocity of the axis.
-----

They could be transformed into pairs of lines like this:
-----
# This is the max velocity of the axis.
MAX_VELOCITY = 7.5
-----

=== Consistent Joints/Axes specifications

Ini file items that affect joints and axes usage must be consistent.

The motion kinematics module typically loaded with '[KINS]KINEMATICS=' must
use a number of joints equal to the number specified with '[KINS]JOINTS='.

The kinematics module must implement axis letters that are consistent with the
specification used by the task module item '[TRAJ]COORDINATES='.

Examples:

Three axis Cartesian machine using trivkins (KINEMATICS_IDENTITY):
-----
  [KINS]KINEMATICS  = trivkins
  [KINS]JOINTS      = 3
  [TRAJ]COORDINATES = XYZ
-----

Two axis lathe using gentrivkins (KINEMATICS_IDENTITY) with non-consecutive
axis letters:
-----
  [KINS]KINEMATICS  = gentrivkins coordinates=XZ
  [KINS]JOINTS      = 2
  [TRAJ]COORDINATES = XZ
-----

Gantry using gentrivkins (KINEMATICS_IDENTITY) with duplicated axis letters:
-----
  [KINS]KINEMATICS  = gentrivkins coordinates=XYYZ
  [KINS]JOINTS      = 4
  [TRAJ]COORDINATES = XYYZ
-----

Gantry using gentrivkins (KINEMATICS_IDENTITY) with duplicated axis letters
and a rotary axis with skipped axis letters (A,B skipped):
-----
  [KINS]KINEMATICS  = gentrivkins coordinates=XYYZC
  [KINS]JOINTS      = 5
  [TRAJ]COORDINATES = XYYZC
-----

Linear Delta Robot with non-identity kins (KINEMATICS_BOTH) working in cartesian frame
with an additional rotary coordinate:
-----
  [KINS]KINEMATICS  = lineardeltakins
  [KINS]JOINTS      = 4
  [TRAJ]COORDINATES = XYZA
-----

Note: Some general-purpose kinematics modules (like gentrivkins) implement
      identity kinematics with support for coordinate specification (axis letters).
      Axis letters may be omitted.  Axis letters may be duplicated.
      Joints are assigned to axis letters in a defined manner ($ man gentrivkins).

Note: For gentrivkins module loading, do not include spaces about the = sign or letters: 

      This:     [KINS]KINEMATICS = gentrivkins coordinates=XZ
      NOT This: [KINS]KINEMATICS = gentrivkins coordinates = X Z

Note: Custom kinematics modules that implement non-identity kinematics (like
      lineardeltakins) define machine-specific relationships between a set
      of coordinates and a set of joints.  Typically, custom kinematics modules
      compute the joints-axes relationships within the custom module but it is
      important to use consistent settings for the related ini items: '[KINS]JOINTS'
      and '[TRAJ]COORDINATES'.  The details will usually be explained in the
      module man page (for example, $ man lineardeltakins).

=== Locking rotary indexer (updates for joints_axes)

With joints_axes, an indexer is a joint that can be homed (joint mode)
but must also be unlocked from gcode.  This requires a one-to-one
correspondence between a single joint and an axis.

Specify the joint number that corresponds to a rotary axis (L = A,B, or C)
with an ini file setting for the axis:

----
  [AXIS_L]LOCKING_INDEXER_JOINT = joint_number_for_indexer
----

Specify that the joint is a locking indexer with an ini file setting
for the joint (N is the joint_number_for_indexer):

----
  [JOINT_N]LOCKING_INDEXER = 1
----

Hal pins can be created to coordinate use of a locking indicator joint:

----
   joint.N.unlock      (BIT output from Hal)
   joint.N.is-unlocked (BIT input  to   Hal)
----

To create these hal pins for locking joints, specify all joints that
are used as locking indexers with the 'unlock_joints_mask' parameter for
the motmod module.  (bit0(LSB)==>joint0, bit1==>joint1, etc.)

----
  [EMCMOT]motmod unlock_joints_mask = BITMASK
----

As an example, consider a machine using gentrivkins kinematics with coordinates
XYZB where B is a locking indexer.  For gentrivkins, joint numbers (starting
with 0) are assigned consecutively to the coordinates specified (axis
coordinate letters may be omitted).  For this example, X==>joint0, Y==>joint1,
Z==>joint2, B==>joint3.  The mask to specify joint 3 is 000001000 (binary) ==
0x08 (hexadecimal)

The required ini file entries for this gentrivkins XYZB example are:
----
  [KINS]
  JOINTS = 4
  KINEMATICS = gentrivkins coordinates=XYZB
  ...

  [TRAJ]
  COORDINATES = XYZB
  ...

  [EMCMOT]
  EMCMOT = motmod unlock_joints_mask = 0x08
  ...

  [AXIS_B]
  LOCKING_INDEXER_JOINT = 3
  ...

  [JOINT_3]
  LOCKING_INDEXER = 1
  ...
----

For more complex kinematics, select the joint number as required -- there must
be a one-to-one correspondence between the rotary axis and the joint number.

(See the motion man page ($ man motion) for more information on motmod)

== Hal (updates for joints_axes)

=== Ini Hal pins

Hal pins are created for ini file items for both joints ([JOINT_N] stanzas)
and axes ([AXIS_L] stanzas):

  For N = 0 ... [KINS](JOINTS -1)
  Ini File Item              hal pin name
  [JOINT_N]BACKLASH          ini.N.backlash
  [JOINT_N]FERROR            ini.N.ferror
  [JOINT_N]MIN_FERROR        ini.N.min_ferror
  [JOINT_N]MIN_LIMIT         ini.N.min_limit
  [JOINT_N]MAX_LIMIT         ini.N.max_limit
  [JOINT_N]MAX_VELOCITY      ini.N.max_velocity
  [JOINT_N]MAX_ACCELERATION  ini.N.max_acceleration

  For L = x y z a b c u v w:
  Ini File Item              hal pin name
  [AXIS_L]MIN_LIMIT          ini.L.min_limit
  [AXIS_L]MAX_LIMIT          ini.L.max_limit
  [AXIS_L]MAX_VELOCITY       ini.L.max_velocity
  [AXIS_L]MAX_ACCELERATION   ini.L.max_acceleration

Note: In prior versions of LinuxCNC (before joints_axes updates), the
      hal pin names 'ini.N.*' referred to axes with 0==>x, 1==>y, etc.
      (pins were created for all 9 axes)
      See the man page ($ man milltask) for more information

== GUIs (updates for joints_axes)

=== Axis gui

==== AUTO_TELEOP

The axis gui supports an option, [KINS]AUTO_TELEOP = nseconds, to cause
an automatic switch to teleop mode after homing.  The nseconds parameter
specifes the maxium time to wait after initiating homing with the
Home-All button.  The setting is applicable only for kinematics that
are not KINEMATICS_IDENTITY.

Usage Example (wait 20 seconds max):

----
[KINS]
AUTO_TELEOP = 20
...
----

==== Home icons

For identity kinematics, home icons are shown for joint numbers and
the corresponding axis letter when a joint is homed.

For non-identity kinematics, home icons are shown for individual joints
when the joint is homed but home icons for axis letters are shown only
if ALL joints are homed.

==== Limit icons

For identity kinematics, limit icons are shown for joint numbers and
the corresponding axis letter when a joint limit is active.

For non-identity kinematics, limit icons are shown for individual joints
when the joint limit is active.  Limit icons are not shown for axis
letters since there is no guaranteed correspondence to a joint number.

==== Key bindings for a fourth axis

If a fourth axis is defined in a conventional cartesian configuration
(xyza,xyzb,xyzc) the axis gui will assign the "[","]" keys for jogging the
fourth axis (a,b,c).  The assignment may not be correct in configurations that
use duplicate axis letters with a gentrivkins configuration (example: xyyzb).
In such cases, the "[","]" key bindings can be made using a custom ~/.axisrc
file:

----
For xyyzb
bind_axis("bracketleft, "bracketright", 4)
(b is the 4th axis letter in the allowed set of axis letters: "xyzabcuvw"):
----

=== Halui

Halui now supports teleop jogging resulting in some changed pin names and
numerous new names for jogging-related pins.

See the man page ($ man halui) for all pin names.

==== TELEOP jogging (also called axis or world jogging)

New pins for teleop jogging are:

----
      new: halui.axis.jog-speed
      new: halui.axis.jog-deadband

      new: halui.axis.L.plus
      new: halui.axis.L.minus
           ... etc.
----

where 'L' is a letter corresponding to one of the axis letters specified by
[TRAJ]COORDINATES or 'selected' for the axis selected by the
halui.axis.L.select pins.

==== Joint jogging

All pins for joint jogging were renamed for specificity:

----
      was: halui.jog-speed          is: halui.joint.jog-speed
      was: halui.jog-deadband       is: halui.joint.jog-deadband

      was: halui.jog.N.plus         is: halui.joint.N.plus
      was: halui.jog.N.minus        is: halui.joint.N.minus
           ...  etc.                    ... etc.
----

where 'N' is a joint number (0 ... num_noints-1) or 'selected'
for the joint selected by the halui.joint.N.select pins.

====  Aditional pin renames

The hal pins for 'selected' joints were renamed for consistency
with related pins.

----
      was: halui.joint.selected.is_homed
       is: halui.joint.selected.is-homed

      was: halui.joint.selected.on-soft-limit
       is: halui.joint.selected.on-soft-min-limit
----


=== linuxcncrsh

The jogging commands have been altered to accomodate both joint (free)
and teleop (world) jogging.

----
    was: set jog      joint_number             speed
     is: set jog      joint_number|axis_letter speed

    was: set jog_incr joint_number             speed increment
     is: set jog_incr joint_number|axis_letter speed increment

    was: set jog_stop
     is: set jog_stop joint_number|axis_letter
----

Note: Test for teleop mode using command: get teleop_enable
      if TELEOP_ENABLE=YES, use axis_letter
      else                  use joint_number

Note: Formerly, the command 'set jog 0 1.234' would jog the zeroth
axis (X) with requested speed=1.234 in any mode (free or teleop).
This command now attemps to jog the zeroth joint (Joint0) provided
the mode is free (not teleop).  To jog the X axis, the mode
must be teleop and the corresponding command is: 'set jog x 1.234'


// vim: set syntax=asciidoc:
